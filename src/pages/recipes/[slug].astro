---
import recipes from "../../data/recipes";
import BaseLayout from "../../layouts/BaseLayout.astro";
import NutritionTable from "../../components/NutritionTable.astro";
import Nutrient from "../../components/Nutrient.astro";
import RecipeHighlight from "../../components/RecipeHighlight.astro";
import RecipeOverview from "../../components/RecipeOverview.astro";
import RecipeConfig from "../../components/RecipeConfig.astro";
import ServingSizeSelector from "../../components/ServingSizeSelector.astro";
import UnitSelector from "../../components/UnitSelector.astro";

export function getStaticPaths() {
  return recipes.map(({ slug, ...props }) => {
    return {
      params: { slug: slug },
      props: { ...props },
    };
  });
}
const props = Astro.props;
const renderNutrition = Object.entries(props.nutrition);
---

<BaseLayout title={props.title}>
  <RecipeHighlight
    title={props.title}
    author={props.author}
    description={props.description}
    imgSrc={props.imgSrc}
    alt={props.alt}
  />

  <section class="recipe-details">
    <aside class="recipe-instructions">
      <RecipeConfig>
        <ServingSizeSelector value="1" />
        <UnitSelector value="imperial" />
      </RecipeConfig>

      <div class="list-container">
        <h3 class="list-caption">Ingredients</h3>
        <ul>
          {
            props.ingredients.quantified.map(({ amount, unit, item }) => {
              if (unit == "g" || unit == "oz") {
                return (
                  <li>
                    {amount}
                    {unit} {item}
                  </li>
                );
              }
              return (
                <li>
                  {amount} {unit} {item}
                </li>
              );
            })
          }
          {
            props.ingredients.unquantified.map((value) => {
              return <li>{value}</li>;
            })
          }
        </ul>
      </div>

      <div class="list-container">
        <h3 class="list-caption">Directions</h3>
        <ol>
          {
            props.steps.map((step, index) => {
              return <li data-counter={`Step ${index + 1}`}>{step}</li>;
            })
          }
        </ol>
      </div>
    </aside>
    <aside class="recipe-nutrition">
      <RecipeOverview
        prepTime={props.overview.prepTime}
        cookTime={props.overview.cookTime}
        totalTime={props.overview.totalTime}
        freezable={props.overview.freezable}
        difficulty={props.overview.difficulty}
        servings={props.overview.servings}
      />
      <NutritionTable
        servings="4"
        calories={props.calories}>
        {
          renderNutrition.map(([key, details]) => {
            return (
              <>
                <Nutrient
                  label={details.label}
                  amount={details.amount}
                  percent={details.percent}
                />
                {details.subtypes &&
                  details.subtypes.map(({ label, amount, percent }) => {
                    return (
                      <Nutrient
                        label={label}
                        amount={amount}
                        percent={percent}
                        type="sub"
                      />
                    );
                  })}
              </>
            );
          })
        }
      </NutritionTable>
    </aside>
  </section>
</BaseLayout>
